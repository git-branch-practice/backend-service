name: CI - Build & Upload to GCS (DEV)

on:
  push:
    branches: [develop]

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.date.outputs.tag }}

    steps:
      # 1. 저장소 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Java 21 환경 설정
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      # 3. gradlew 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # 4. 애플리케이션 빌드 (테스트 제외)
      - name: Build without tests
        run: ./gradlew clean bootJar -x test

      # 5. JAR 파일명용 타임스탬프 생성
      - name: Generate datetime tag
        id: date
        run: |
          export TZ=Asia/Seoul
          tag=$(date +'%Y%m%d-%H%M')
          echo "tag=$tag" >> $GITHUB_OUTPUT

      # 6. GCP 인증 (서비스 계정 키 사용)
      - name: Authenticate to GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      # 7. gcloud CLI 사용을 위한 환경 설정
      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: your-gcp-project-id

      # 8. JAR 파일명을 타임스탬프 기반으로 변경
      - name: Rename JAR to timestamp
        id: jar
        run: |
          jar_path=$(ls build/libs/*SNAPSHOT.jar | head -n1)
          timestamp=${{ steps.date.outputs.tag }}
          new_jar="build/libs/${timestamp}.jar"
          mv "$jar_path" "$new_jar"
          echo "JAR_PATH=$new_jar" >> $GITHUB_OUTPUT

      # 9. GCS에 버전 태그된 JAR 업로드
      - name: Upload versioned JAR to GCS
        uses: google-github-actions/upload-cloud-storage@v1
        with:
          path: ${{ steps.jar.outputs.JAR_PATH }}
          destination: 6-nemo-bucket/v1/backend-deploy/dev/
          process_gcloudignore: false

      # 10. GCS에 배포 스크립트(deploy/) 업로드
      - name: Upload deploy scripts to GCS
        uses: google-github-actions/upload-cloud-storage@v1
        with:
          path: deploy/
          destination: 6-nemo-bucket/v1/backend-deploy/dev/
          process_gcloudignore: false

  cd-deploy:
    # CI 완료 후 CD 워크플로우 트리거
    name: Trigger CD after successful CI
    needs: build
    if: startsWith(github.ref, 'refs/heads/develop') || startsWith(github.ref, 'refs/heads/ci-cd/')
    uses: ./.github/workflows/dev-cd.yaml
    with:
      JAR_TIMESTAMP: ${{ needs.build.outputs.tag }}
    secrets:
      DEV_HOST: ${{ secrets.DEV_HOST }}
      DEV_USER: ${{ secrets.DEV_USER }}
      DEV_SSH_KEY: ${{ secrets.DEV_SSH_KEY }}
