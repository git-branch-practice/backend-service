name: CD - Backend Deploy from GCS

on:
  push:
    branches: [main, develop]

jobs:
  deploy:
    runs-on: ubuntu-22.04
    environment:
      name: ${{ github.ref_name == 'main' && 'production' || 'staging' }}

    steps:
      - name: Authenticate to GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_KEY_JSON }}

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Set env by branch
        run: |
          if [ "${{ github.ref_name }}" = "main" ]; then
            echo "TARGET_ENV=prod" >> $GITHUB_ENV
            echo "SSH_USER=${{ secrets.PROD_SSH_USER }}" >> $GITHUB_ENV
            echo "SSH_HOST=${{ secrets.PROD_SSH_HOST }}" >> $GITHUB_ENV
            echo "GIT_BRANCH=main" >> $GITHUB_ENV
          else
            echo "TARGET_ENV=dev" >> $GITHUB_ENV
            echo "SSH_USER=${{ secrets.DEV_SSH_USER }}" >> $GITHUB_ENV
            echo "SSH_HOST=${{ secrets.DEV_SSH_HOST }}" >> $GITHUB_ENV
            echo "GIT_BRANCH=develop" >> $GITHUB_ENV
          fi

      - name: Download .jar from GCS
        run: |
          gsutil cp gs://${{ secrets.GCS_BUCKET }}/$TARGET_ENV/backend/${{ github.sha }}.jar ./app.jar

      - name: Create SSH private key file
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Ensure backend deploy dir exists
        run: |
          ssh -o StrictHostKeyChecking=no -i private_key.pem $SSH_USER@$SSH_HOST "mkdir -p ~/deploy/backend"

      - name: Transfer JAR to server
        run: |
          scp -o StrictHostKeyChecking=no -i private_key.pem ./app.jar $SSH_USER@$SSH_HOST:~/deploy/backend/

      - name: Git pull deploy scripts on server
        run: |
          ssh -o StrictHostKeyChecking=no -i private_key.pem $SSH_USER@$SSH_HOST "
            set -e
            if [ ! -d ~/deploy/scripts/.git ]; then
              git clone --depth 1 --branch $GIT_BRANCH https://github.com/git-branch-practice/backend-service.git ~/deploy
            else
              cd ~/deploy && git fetch && git checkout $GIT_BRANCH && git pull
            fi
            cp ~/deploy/*.sh ~/deploy/backend/
          "

      - name: Execute stop → start → validate
        run: |
          ssh -o StrictHostKeyChecking=no -i private_key.pem $SSH_USER@$SSH_HOST "
            set -e
            cd ~/deploy/backend
            bash stop.sh
            bash start.sh
            bash validate.sh
          "
